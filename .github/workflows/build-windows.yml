# .github/workflows/build-windows.yml

name: Build Windows App

on:
  push:
    branches:
      - master    # ou sua branch principal

jobs:
  build-windows:
    runs-on: windows-latest

    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller PySide6 pillow opencv-python

      - name: Build standalone EXE (sem ícone)
        run: |
          pyinstaller `
            --noconfirm `
            --clean `
            --onefile `
            --windowed `
            --add-data "models;models" `
            photo_importer_app.py

      - name: Compress EXE to ZIP
        run: |
          Compress-Archive -Path dist\photo_importer_app.exe -DestinationPath PhotoImporter-Windows.zip

      - name: Publish GitHub Release with asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # extrai owner e repo do contexto
          $parts = "${{ github.repository }}" -split '/'
          $owner = $parts[0]
          $repo  = $parts[1]
          $tag   = "v${{ github.run_number }}"

          Write-Host "==> Criando release $tag..."
          try {
            $release = Invoke-RestMethod -Method Post `
              -Uri "https://api.github.com/repos/$owner/$repo/releases" `
              -Headers @{
                Authorization = "Bearer $env:GITHUB_TOKEN"
                "Content-Type" = "application/json"
              } `
              -Body (@{
                tag_name = $tag
                name     = $tag
                body     = "Build automática via GitHub Actions para Windows"
              } | ConvertTo-Json)
          } catch {
            Write-Host "Release $tag já existe; recuperando informação..."
            $release = Invoke-RestMethod -Method Get `
              -Uri "https://api.github.com/repos/$owner/$repo/releases/tags/$tag" `
              -Headers @{ Authorization = "Bearer $env:GITHUB_TOKEN" }
          }

          $uploadUrl = $release.upload_url -replace '\{.*',''
          Write-Host "Upload URL: $uploadUrl"

          Write-Host "==> Enviando PhotoImporter-Windows.zip..."
          curl.exe -s -X POST `
            -H "Authorization: Bearer $env:GITHUB_TOKEN" `
            -H "Content-Type: application/zip" `
            --data-binary @PhotoImporter-Windows.zip `
            "$uploadUrl?name=PhotoImporter-Windows.zip"

          Write-Host "==> Release $tag criado/atualizado com sucesso."
          # força código de saída zero para não falhar o step
          exit 0
